# Number of worker processes to handle incoming requests.
# Setting it to 1 means NGINX will use a single worker process.
worker_processes 1;

# Configuration for handling events (connections).
events {
    # Maximum number of simultaneous connections a worker can handle.
    worker_connections 1024;
}

http {
    # Include MIME types so NGINX knows how to handle various file types.
    include mime.types;

    # Define a load balancer group named "nodejs_cluster".
    upstream nodejs_cluster {
        # Use the "least_conn" method to send traffic to the server with the fewest active connections.
        least_conn;
        # List of backend servers in the cluster.
        server 127.0.0.1:3001;  # Server 1
        server 127.0.0.1:3002;  # Server 2
        server 127.0.0.1:3003;  # Server 3
    }

    # Define a server block for HTTPS traffic.
    server {
        # Listen for HTTPS traffic on port 443.
        listen 443 ssl;

        # Define the domain name or IP address for this server.
        server_name 192.168.1.26;

        # SSL certificate and key for secure communication.
        ssl_certificate C:\\Windows\\nginxCerts\\nginx-selfsigned.crt; # Path to SSL certificate.
        ssl_certificate_key C:\\Windows\\nginxCerts\\nginx-selfsigned.key; # Path to SSL key.
        # Define rules for requests to the root location (/).
        location / {
            # Forward requests to the "nodejs_cluster" upstream group.
            proxy_pass http://nodejs_cluster;

            # Pass the original host name of the request.
            proxy_set_header Host $host;

            # Pass the real IP address of the client.
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # Define a server block for HTTP traffic on port 8081.
    server {
        # Listen for HTTP traffic on port 8081.
        listen 8081;

        # Define the domain name or IP address for this server.
        server_name localhost;

        # Redirect all HTTP traffic to HTTPS using a 301 (permanent) redirect.
        location / {
            return 301 https://$host$request_uri;  # Redirect to HTTPS.
        }
    }
}

